{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/pairty/",
    "result": {"data":{"mdx":{"id":"78cb193c-5c50-5817-8ff7-939538244002","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"parity 계산하기\",\n  \"subTitle\": \"from. 266가지 문제로 정복하는 코딩 인터뷰\",\n  \"category\": \"algorithm\",\n  \"date\": \"2023-04-19T12:33:58.000Z\",\n  \"cover\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"2\\uC9C4\\uC218\\uC758 Parity\\uB97C \\uAD6C\\uD558\\uB294 \\uC54C\\uACE0\\uB9AC\\uC998 \\uBE44\\uAD50.\"), mdx(\"h4\", {\n    \"id\": \"무식하게-풀기-on\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#%EB%AC%B4%EC%8B%9D%ED%95%98%EA%B2%8C-%ED%92%80%EA%B8%B0-on\",\n    \"aria-label\": \"무식하게 풀기 on permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"\\uBB34\\uC2DD\\uD558\\uAC8C \\uD480\\uAE30 \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"O(N)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"short Pairty(int x){\\n    short result = 0;\\n    while (x) {\\n        result ^= (x & 1);\\n        x >>= 1;\\n    }\\n    return result;\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"1로-세팅된-비트의-개수가-k개면-ok\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#1%EB%A1%9C-%EC%84%B8%ED%8C%85%EB%90%9C-%EB%B9%84%ED%8A%B8%EC%9D%98-%EA%B0%9C%EC%88%98%EA%B0%80-k%EA%B0%9C%EB%A9%B4-ok\",\n    \"aria-label\": \"1로 세팅된 비트의 개수가 k개면 ok permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1\\uB85C \\uC138\\uD305\\uB41C \\uBE44\\uD2B8\\uC758 \\uAC1C\\uC218\\uAC00 k\\uAC1C\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"O(k)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"short Parity(int x) {\\n    short result = 0;\\n    while (x) {\\n        result ^= 1;\\n        x &= (x - 1); // x\\uC758 \\uD558\\uC704\\uBE44\\uD2B8 \\uC81C\\uAC70\\n    }\\n    return result;\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"lookup-table을-이용한-방법-onl\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#lookup-table%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95-onl\",\n    \"aria-label\": \"lookup table을 이용한 방법 onl permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"LookUp Table\\uC744 \\uC774\\uC6A9\\uD55C \\uBC29\\uBC95 \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"O(N/L)\")), mdx(\"p\", null, \"N = \\uC804\\uCCB4 \\uBE44\\uD2B8\\uC218(32), L = \\uD574\\uC2DC \\uD14C\\uC774\\uBE14\\uC758 \\uD0A4\\uAC12\\uC758 \\uD06C\\uAE30(8)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Macros to generate the lookup table (at compile-time)\\nstatic const bool ParityTable256[256] = {\\n#define P2(n) n, n ^ 1, n ^ 1, n\\n#define P4(n) P2(n), P2(n ^ 1), P2(n ^ 1), P2(n)\\n#define P6(n) P4(n), P4(n ^ 1), P4(n ^ 1), P4(n)\\n    P6(0), P6(1), P6(1), P6(0)};\\n\\n// Function to find parity of `x`\\nshort findParity(int x) {\\n    const short kMaskSize = 8;\\n    const short kBitMask = 0xFF;\\n\\n    return ParityTable256[x >> (3 * kMaskSize)] ^\\n           ParityTable256[(x >> (2 * kMaskSize)) & kBitMask] ^\\n           ParityTable256[(x >> kMaskSize) & kBitMask] ^\\n           ParityTable256[x & kBitMask];\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"결합법칙-교환법칙-응용-ologn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#%EA%B2%B0%ED%95%A9%EB%B2%95%EC%B9%99-%EA%B5%90%ED%99%98%EB%B2%95%EC%B9%99-%EC%9D%91%EC%9A%A9-ologn\",\n    \"aria-label\": \"결합법칙 교환법칙 응용 ologn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"\\uACB0\\uD569\\uBC95\\uCE59, \\uAD50\\uD658\\uBC95\\uCE59 \\uC751\\uC6A9 \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"O(logn)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Compute parity of a number `x` using the lookup table\\nshort findParity(int x) {\\n    // recursively divide the (32\\u2013bit) integer into two equal\\n    // halves and take their XOR until only 1 bit is left\\n    x ^= x >> 16;\\n    x ^= x >> 8;\\n    x ^= x >> 4;\\n    x ^= x >> 2;\\n    x ^= x >> 1;\\n\\n    // return 1 if the last bit is set; otherwise, return 0\\n    return x & 1;\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"maybe-best-practice\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#maybe-best-practice\",\n    \"aria-label\": \"maybe best practice permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Maybe\\u2026 Best Practice\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static const bool ParityTable256[256] = {\\n#define P2(n) n, n ^ 1, n ^ 1, n\\n#define P4(n) P2(n), P2(n ^ 1), P2(n ^ 1), P2(n)\\n#define P6(n) P4(n), P4(n ^ 1), P4(n ^ 1), P4(n)\\n    P6(0), P6(1), P6(1), P6(0)};\\n\\nint main() {\\n    // byte value to compute the parity of\\n    unsigned char b;\\n    bool parity = ParityTable256[b];\\n\\n    // OR, for 32-bit words:\\n    unsigned int v;\\n    v ^= v >> 16;\\n    v ^= v >> 8;\\n    parity = ParityTable256[v & 0xff];\\n\\n    // Variation:\\n    unsigned char* p = (unsigned char*)&v;\\n    parity = ParityTable256[p[0] ^ p[1] ^ p[2] ^ p[3]];\\n    return 0;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"reference\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#reference\",\n    \"aria-label\": \"reference permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphics.stanford.edu/~seander/bithacks.html\"\n  }, \"https://graphics.stanford.edu/~seander/bithacks.html\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"2진수의 Parity를 구하는 알고리즘 비교. 무식하게 풀기  O(N) 1로 세팅된 비트의 개수가 k개면  O(k) LookUp Table을 이용한 방법  O(N/L) N = 전체 비트수(32), L = 해시 테이블의 키값의 크기(…","tableOfContents":{"items":[{"url":"#reference","title":"Reference"}]},"fields":{"slug":"/pairty/"},"frontmatter":{"title":"parity 계산하기","subTitle":"from. 266가지 문제로 정복하는 코딩 인터뷰","date":"Wednesday, April 19th 2023, 12:33  PM","cover":null}}},"pageContext":{"id":"78cb193c-5c50-5817-8ff7-939538244002"}},
    "staticQueryHashes": ["1532257615","2045167491","3868834917"]}