{"version":3,"sources":["webpack:///./src/components/Footer.tsx","webpack:///./src/templates/index.tsx"],"names":["Footer","css","outer","SiteFooter","inner","SiteFooterContent","className","to","config","title","Date","getFullYear","footer","SiteFooterNav","setLightness","colors","darkgrey","pageQuery","HomePosts","IndexPage","props","width","height","data","header","childImageSharp","fixed","lang","name","content","description","property","siteUrl","src","facebook","googleSiteVerification","twitter","split","toString","SiteHeader","SiteHeaderStyles","style","backgroundImage","isHome","id","SiteMain","Posts","PostFeed","allMdx","edges","map","post","index","node","frontmatter","draft","key","fields","slug","large","allMarkdownRemark","children"],"mappings":"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","file":"component---src-templates-index-tsx-d8bde96c7b416dd36285.js","sourcesContent":["import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && (\n            <Link to=\"/\">\n              | {config.footer}\n            </Link>\n          )}\n        </section>\n        <SiteFooterNav>\n          <Link to=\"/\">Latest Posts</Link>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { graphql } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { PageContext } from './post';\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n    allMdx: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-conent\">\n              <SiteTitle className=\"site-title\">{config.title}</SiteTitle>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMdx.edges.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!) {\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: 8\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: 8\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      base64\n                      tracedSVG\n                      srcWebp\n                      srcSetWebp\n                      originalImg\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}