{"version":3,"file":"vendors-node_modules_mermaid_dist_svgDraw-2526cba0_js.render-page.js","mappings":";;;;;;;;;;;;;;;;;;;AAAsC;AACW;AACyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAI;AAC3B;AACA,GAAG;AACH;AACA,GAAG,QAAQ,0CAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,8BAA8B,yEAA6B;AAC3D;AACA;AACA;AACA;AACA,8BAA8B,yEAA6B;AAC3D;AACA;AACA;AACA;AACA,IAAI,0DAAS;AACb,IAAI,0DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,yDAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA,IAAI,0DAAS,iBAAiB,MAAM;AACpC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAiB;AACvD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAiB;AACtD;AACA,6CAA6C,wDAAiB;AAC9D;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,wDAAiB;AACnE;AACA;AACA;AACA,6BAA6B,wDAAiB;AAC9C;AACA;AACA;AACA,IAAI;AACJ,kBAAkB,wDAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACF","sources":["webpack://bradkim06/./node_modules/mermaid/dist/svgDraw-2526cba0.js"],"sourcesContent":["import { line, curveBasis } from \"d3\";\nimport { u as utils } from \"./utils-d622194a.js\";\nimport { l as log, z as parseGenericTypes } from \"./commonDb-573409be.js\";\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case diagObj.db.relationType.EXTENSION:\n        return \"extension\";\n      case diagObj.db.relationType.COMPOSITION:\n        return \"composition\";\n      case diagObj.db.relationType.DEPENDENCY:\n        return \"dependency\";\n      case diagObj.db.relationType.LOLLIPOP:\n        return \"lollipop\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr(\"class\", \"relation dashed-line\");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr(\"class\", \"relation dotted-line\");\n  }\n  if (relation.relation.type1 !== \"none\") {\n    svgPath.attr(\n      \"marker-start\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\"\n    );\n  }\n  if (relation.relation.type2 !== \"none\") {\n    svgPath.attr(\n      \"marker-end\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\"\n    );\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== \"none\",\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== \"none\",\n      path.points,\n      path.points[l - 1]\n    );\n    log.debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n    log.debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n    const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n  }\n  log.info(\"Rendering relation \" + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n  log.debug(\"Rendering class \", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n  let title;\n  if (classDef.link) {\n    title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  } else {\n    title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function(member) {\n    const titleText2 = title.append(\"tspan\").text(\"«\" + member + \"»\");\n    if (!isFirst) {\n      titleText2.attr(\"dy\", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = classDef.id;\n  if (classDef.type !== void 0 && classDef.type !== \"\") {\n    classTitleString += \"<\" + classDef.type + \">\";\n  }\n  const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n  if (!isFirst) {\n    classTitle.attr(\"dy\", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  const membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n  const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.members.forEach(function(member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n  const membersBox = members.node().getBBox();\n  const methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n  const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.methods.forEach(function(method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n  const classBox = g.node().getBBox();\n  var cssClassStr = \" \";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n  }\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert(\"title\").text(classDef.tooltip);\n  }\n  membersLine.attr(\"x2\", rectWidth);\n  methodsLine.attr(\"x2\", rectWidth);\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n  log.debug(\"Rendering note \", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n  let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  const lines = JSON.parse(`\"${note.text}\"`).split(\"\\n\");\n  lines.forEach(function(line2) {\n    log.debug(`Adding line: ${line2}`);\n    text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\n    \"height\",\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n  );\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst parseMember = function(text) {\n  const fieldRegEx = /^([#+~-])?(\\w+)(~\\w+~|\\[])?\\s+(\\w+) *([$*])?$/;\n  const methodRegEx = /^([#+|~-])?(\\w+) *\\( *(.*)\\) *([$*])? *(\\w*[[\\]|~]*\\s*\\w*~?)$/;\n  let fieldMatch = text.match(fieldRegEx);\n  let methodMatch = text.match(methodRegEx);\n  if (fieldMatch && !methodMatch) {\n    return buildFieldDisplay(fieldMatch);\n  } else if (methodMatch) {\n    return buildMethodDisplay(methodMatch);\n  } else {\n    return buildLegacyDisplay(text);\n  }\n};\nconst buildFieldDisplay = function(parsedText) {\n  let cssStyle = \"\";\n  let displayText = \"\";\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : \"\";\n    let fieldType = parsedText[2] ? parsedText[2].trim() : \"\";\n    let genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : \"\";\n    let fieldName = parsedText[4] ? parsedText[4].trim() : \"\";\n    let classifier = parsedText[5] ? parsedText[5].trim() : \"\";\n    displayText = visibility + fieldType + genericType + \" \" + fieldName;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst buildMethodDisplay = function(parsedText) {\n  let cssStyle = \"\";\n  let displayText = \"\";\n  try {\n    let visibility = parsedText[1] ? parsedText[1].trim() : \"\";\n    let methodName = parsedText[2] ? parsedText[2].trim() : \"\";\n    let parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : \"\";\n    let classifier = parsedText[4] ? parsedText[4].trim() : \"\";\n    let returnType = parsedText[5] ? \" : \" + parseGenericTypes(parsedText[5]).trim() : \"\";\n    displayText = visibility + methodName + \"(\" + parameters + \")\" + returnType;\n    cssStyle = parseClassifier(classifier);\n  } catch (err) {\n    displayText = parsedText;\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst buildLegacyDisplay = function(text) {\n  let displayText = \"\";\n  let cssStyle = \"\";\n  let returnType = \"\";\n  let methodStart = text.indexOf(\"(\");\n  let methodEnd = text.indexOf(\")\");\n  if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {\n    let visibility = \"\";\n    let methodName = \"\";\n    let firstChar = text.substring(0, 1);\n    if (firstChar.match(/\\w/)) {\n      methodName = text.substring(0, methodStart).trim();\n    } else {\n      if (firstChar.match(/[#+~-]/)) {\n        visibility = firstChar;\n      }\n      methodName = text.substring(1, methodStart).trim();\n    }\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    text.substring(methodEnd + 1, 1);\n    cssStyle = parseClassifier(text.substring(methodEnd + 1, methodEnd + 2));\n    displayText = visibility + methodName + \"(\" + parseGenericTypes(parameters.trim()) + \")\";\n    if (methodEnd < text.length) {\n      returnType = text.substring(methodEnd + 2).trim();\n      if (returnType !== \"\") {\n        returnType = \" : \" + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    displayText = parseGenericTypes(text);\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst addTspan = function(textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n  const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(member.displayText);\n  if (member.cssStyle !== \"\") {\n    tSpan.attr(\"style\", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr(\"dy\", conf.textHeight);\n  }\n};\nconst parseClassifier = function(classifier) {\n  switch (classifier) {\n    case \"*\":\n      return \"font-style:italic;\";\n    case \"$\":\n      return \"text-decoration:underline;\";\n    default:\n      return \"\";\n  }\n};\nconst svgDraw = {\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember\n};\nexport {\n  parseMember as p,\n  svgDraw as s\n};\n//# sourceMappingURL=svgDraw-2526cba0.js.map\n"],"names":[],"sourceRoot":""}