{"version":3,"sources":["webpack:///./src/templates/mdxtags.tsx","webpack:///./src/components/Footer.tsx"],"names":["Tags","pageContext","data","location","tag","edges","totalCount","allMdx","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post","pageQuery","Footer","SiteFooter","SiteFooterContent","to","Date","getFullYear","footer","SiteFooterNav","setLightness","colors","darkgrey"],"mappings":"gSAmIeA,UA5EF,EAAGC,cAAaC,OAAMC,eAAiC,YACnE,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,OAC7BC,EAAUN,EAAKO,WAAWJ,MAAMK,KACrCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAAIU,eAGtC,OACC,YAAC,IAAD,KACC,YAAC,IAAD,KACC,oBAAMC,KAAMC,IAAOD,OACnB,yBACEX,EADF,MACUY,IAAOC,OAEjB,oBAAMC,KAAK,cAAcC,SAASX,aAAA,EAAAA,EAASI,MAAOJ,EAAQI,KAAKQ,YAAc,KAC7E,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEf,OAASY,IAAOC,UACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUnB,EAASoB,WAC1DP,IAAOQ,UAAY,oBAAMH,SAAS,oBAAoBF,QAASH,IAAOQ,WACvE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEf,OAASY,IAAOC,UACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUnB,EAASoB,WAC3DP,IAAOS,SACP,oBACCP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAI7D,YAAC,IAAD,KACC,sBACCC,UAAU,sBACVC,IAAG,YAAE,CAACC,IAAYC,OAElB,mBAAKF,IAAG,YAAE,CAACG,IAAOC,OACjB,mBAAKJ,IAAKK,KACT,YAAC,IAAD,CAASC,QAAQ,MAGnB,YAAC,IAAD,CACCN,IAAG,YAAE,CAACG,IAAOI,MACbC,gBAAiB5B,SAAF,UAAEA,EAASI,YAAX,iBAAE,EAAeyB,aAAjB,iBAAE,EAAsBC,uBAAxB,iBAAE,EAAuCC,aAAzC,aAAE,EAA8CC,IAC/Db,UAAU,0BAEV,YAAC,IAAD,CAAmBC,IAAKK,IAAON,UAAU,uBACxC,YAAC,IAAD,CAAWA,UAAU,cAAcvB,GACnC,YAAC,IAAD,CAAiBuB,UAAU,qBACzBnB,aAAA,EAAAA,EAASI,KAAKQ,aACdZ,EAAQI,KAAKQ,YAEb,iDACkBd,EAAa,GAAQA,EAAF,SACpB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAO3B,oBAAMO,GAAG,YAAYe,IAAG,YAAE,CAACa,IAAUV,OACpC,mBAAKH,IAAKK,KACT,mBAAKL,IAAG,YAAE,CAACc,OACTrC,EAAMsC,IAAI,EAAG/B,UACb,YAAC,IAAD,CAAUgC,IAAKhC,EAAKiC,OAAOC,KAAMC,KAAMnC,QAK3C,YAAC,IAAD,SAQG,MAAMoC,EAAY,a,oLC3HlB,MAAMC,EAAmB,IAE5B,sBAAQrB,IAAG,YAAE,CAACG,IAAOmB,KACnB,mBAAKtB,IAAG,YAAE,CAACK,IAAOkB,KAChB,uBAASxB,UAAU,aACjB,YAAC,IAAD,CAAMyB,GAAG,KAAKpC,IAAOC,OADvB,OAC6C,IAAIoC,MAAOC,cAAe,IACpEtC,IAAOuC,QACN,YAAC,IAAD,CAAMH,GAAG,KAAT,KACKpC,IAAOuC,SAIhB,YAACC,EAAD,KACE,YAAC,IAAD,CAAMJ,GAAG,KAAT,mBAOJF,EAAatB,YAAH,gFAKA6B,YAAa,SAAUC,IAAOC,UAL9B,KAQVR,EAAoB,CAAH,2RAmBjBK,EAAgB,mBAAH,mBAAG,CAAH","file":"component---src-templates-mdxtags-tsx-be592daa4aed6d068f4c.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n\tinner,\n\touter,\n\tPostFeed,\n\tSiteDescription,\n\tSiteHeader,\n\tSiteHeaderContent,\n\tSiteMain,\n\tSiteTitle,\n\tSiteNavMain,\n\tSiteArchiveHeader,\n\tResponsiveHeaderBackground,\n\tSiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n\tlocation: Location;\n\tpageContext: {\n\t\ttag: string;\n\t};\n\tdata: {\n\t\tallTagYaml: {\n\t\t\tedges: Array<{\n\t\t\t\tnode: {\n\t\t\t\t\tid: string;\n\t\t\t\t\tdescription: string;\n\t\t\t\t\timage?: {\n\t\t\t\t\t\tchildImageSharp: {\n\t\t\t\t\t\t\tfluid: FluidObject;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}>;\n\t\t};\n\t\tallMdx: {\n\t\t\ttotalCount: number;\n\t\t\tedges: Array<{\n\t\t\t\tnode: PageContext;\n\t\t\t}>;\n\t\t};\n\t};\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n\tconst tag = pageContext.tag ? pageContext.tag : '';\n\tconst { edges, totalCount } = data.allMdx;\n\tconst tagData = data.allTagYaml.edges.find(\n\t\tn => n.node.id.toLowerCase() === tag.toLowerCase(),\n\t);\n\n\treturn (\n\t\t<IndexLayout>\n\t\t\t<Helmet>\n\t\t\t\t<html lang={config.lang} />\n\t\t\t\t<title>\n\t\t\t\t\t{tag} - {config.title}\n\t\t\t\t</title>\n\t\t\t\t<meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n\t\t\t\t<meta property=\"og:site_name\" content={config.title} />\n\t\t\t\t<meta property=\"og:type\" content=\"website\" />\n\t\t\t\t<meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n\t\t\t\t<meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n\t\t\t\t{config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n\t\t\t\t<meta name=\"twitter:card\" content=\"summary_large_image\" />\n\t\t\t\t<meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n\t\t\t\t<meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n\t\t\t\t{config.twitter && (\n\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"twitter:site\"\n\t\t\t\t\t\tcontent={`@${config.twitter.split('https://twitter.com/')[1]}`}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Helmet>\n\t\t\t<Wrapper>\n\t\t\t\t<header\n\t\t\t\t\tclassName=\"site-archive-header\"\n\t\t\t\t\tcss={[SiteHeader, SiteArchiveHeader]}\n\t\t\t\t>\n\t\t\t\t\t<div css={[outer, SiteNavMain]}>\n\t\t\t\t\t\t<div css={inner}>\n\t\t\t\t\t\t\t<SiteNav isHome={true} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ResponsiveHeaderBackground\n\t\t\t\t\t\tcss={[outer, SiteHeaderBackground]}\n\t\t\t\t\t\tbackgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n\t\t\t\t\t\tclassName=\"site-header-background\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<SiteHeaderContent css={inner} className=\"site-header-content\">\n\t\t\t\t\t\t\t<SiteTitle className=\"site-title\">{tag}</SiteTitle>\n\t\t\t\t\t\t\t<SiteDescription className=\"site-description\">\n\t\t\t\t\t\t\t\t{tagData?.node.description ? (\n\t\t\t\t\t\t\t\t\ttagData.node.description\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\tA collection of {totalCount > 1 && `${totalCount} posts`}\n\t\t\t\t\t\t\t\t\t\t{totalCount === 1 && '1 post'}\n\t\t\t\t\t\t\t\t\t\t{totalCount === 0 && 'No posts'}\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</SiteDescription>\n\t\t\t\t\t\t</SiteHeaderContent>\n\t\t\t\t\t</ResponsiveHeaderBackground>\n\t\t\t\t</header>\n\t\t\t\t<main id=\"site-main\" css={[SiteMain, outer]}>\n\t\t\t\t\t<div css={inner}>\n\t\t\t\t\t\t<div css={[PostFeed]}>\n\t\t\t\t\t\t\t{edges.map(({ node }) => (\n\t\t\t\t\t\t\t\t<PostCard key={node.fields.slug} post={node} />\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<Footer />\n\t\t\t</Wrapper>\n\t\t</IndexLayout>\n\t);\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\nquery($tag: String) {\n\tallTagYaml {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tdescription\n\t\t\t\timage {\n\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\tfluid(maxWidth: 3720) {\n\t\t\t\t\t\t\t...GatsbyImageSharpFluid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tallMdx(\n\tlimit: 2000\n\tsort: { fields: [frontmatter___date], order: DESC }\n\tfilter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n\t) {\n\t\ttotalCount\n\t\tedges {\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\texcerpt\n\t\t\t\ttimeToRead\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\ttags\n\t\t\t\t\tdate\n\t\t\t\t\tauthor {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tbio\n\t\t\t\t\t\tavatar {\n\t\t\t\t\t\t\tchildren {\n\t\t\t\t\t\t\t\t... on ImageSharp {\n\t\t\t\t\t\t\t\t\tfluid {\n\t\t\t\t\t\t\t\t\t\tbase64\n\t\t\t\t\t\t\t\t\t\ttracedSVG\n\t\t\t\t\t\t\t\t\t\tsrcWebp\n\t\t\t\t\t\t\t\t\t\tsrcSetWebp\n\t\t\t\t\t\t\t\t\t\toriginalImg\n\t\t\t\t\t\t\t\t\t\toriginalName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfields {\n\t\t\t\t\tlayout\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n`;\n","import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && (\n            <Link to=\"/\">\n              | {config.footer}\n            </Link>\n          )}\n        </section>\n        <SiteFooterNav>\n          <Link to=\"/\">Latest Posts</Link>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n"],"sourceRoot":""}